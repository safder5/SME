
// this is to upload an image after onpressed/ontap 
uploadImage() async {
    final _firebaseStorage = FirebaseStorage.instance;
    final _imagePicker = ImagePicker();
    PickedFile image;
    //Check Permissions
    await Permission.photos.request();

    var permissionStatus = await Permission.photos.status;

    if (permissionStatus.isGranted){
      //Select Image
      image = await _imagePicker.getImage(source: ImageSource.gallery);
      var file = File(image.path);

      if (image != null){
        //Upload to Firebase
        var snapshot = await _firebaseStorage.ref()
        .child('images/imageName')
        .putFile(file).onComplete;
        var downloadUrl = await snapshot.ref.getDownloadURL();
        setState(() {
          imageUrl = downloadUrl;
        });
      } else {
        print('No Image Path Received');
      }
    } else {
      print('Permission not granted. Try Again with permission access');
    }
  }



** convert uint8list to file **

import 'package:path_provider/path_provider.dart';
import 'dart:io';

Uint8List imageInUnit8List = // store unit8List image here ;
final tempDir = await getTemporaryDirectory();
File file = await File('${tempDir.path}/image.png').create();
file.writeAsBytesSync(imageInUnit8List);


//for cellecting all customers data from firebase direvtly to customer provider list 
await Provider.of<CustomerProvider>(context, listen: false).fetchAllCustomers();


//item setup in firebase is by 
item_name
sIh

using build context between async gaps 
use 
 if (!context.mounted) return;


 this will pop all the routes until the main default route and push to your destination route.

 Navigator.pushNamedAndRemoveUntil(context, "destination_route", ModalRoute.withName('/')); 



class MyPage extends StatefulWidget {
  @override
  _MyPageState createState() => _MyPageState();
}

class _MyPageState extends State<MyPage> {
  bool _isProcessing = false;

  Future<void> _submitData() async {
    // Prevent multiple taps
    if (_isProcessing) {
      return;
    }

    setState(() {
      _isProcessing = true;
    });

    // Perform your database operations or CRUD methods here
    try {
      // Your async database operations here

      // Simulating a delay
      await Future.delayed(Duration(seconds: 2));

      // Set _isProcessing to false when done
      setState(() {
        _isProcessing = false;
      });

      // Show success message or navigate to another screen
      _showSuccessDialog();
    } catch (e) {
      setState(() {
        _isProcessing = false;
      });
      // Handle error
      print('Error: $e');
    }
  }

  void _showSuccessDialog() {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: Text('Success'),
          content: Text('Data submitted successfully.'),
          actions: <Widget>[
            TextButton(
              onPressed: () {
                Navigator.of(context).pop();
              },
              child: Text('OK'),
            ),
          ],
        );
      },
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Submit Data'),
      ),
      body: Stack(
        children: [
          // Your content here
          Center(
            child: ElevatedButton(
              onPressed: _submitData,
              child: Text('Submit'),
            ),
          ),
          // ModalBarrier to block user interactions
          if (_isProcessing)
            ModalBarrier(
              color: Colors.black.withOpacity(0.3),
            ),
          // Show a loading indicator or overlay while processing
          if (_isProcessing)
            Center(
              child: CircularProgressIndicator(),
            ),
        ],
      ),
    );
  }
}
